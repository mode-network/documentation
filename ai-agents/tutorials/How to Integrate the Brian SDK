# How to Integrate the Brian SDK

This tutorial will show you how to integrate and use the Brian SDK in your project to interact with artificial intelligence on the blockchain.

## Prerequisites

* [Node.js ](https://nodejs.org/) and [NPM](https://docs.npmjs.com/cli/v8/commands/npm-install) installed.
* Basic knowledge of JavaScript.
* Web3-compatible wallet (Rabby recommended).

# Step 1: Set Up the Project

1. Create and access the project:
```bash
mkdir guide-brian

cd guide-brian
```
2. Open it in VSCode:
```bash
code .
```
3. Initialize a Node.js project:
```bash
npm init -y
```
4. Configure ES Modules: In package.json, add:
```json
{
"type": "module"
}
```
**Note:** `npm init -y` creates a package.json file with default settings to manage dependencies and scripts. The `"type": "module"` enables the use of ES Modules syntax in the project.

# Step 2: Install Dependencies
1. Install the Brian SDK:
```
npm install @brian-ai/sdk
```
2. Install dotenv:
```
npm install dotenv
```

**Note:** dotenv allows you to load environment variables from a `.env` file, keeping credentials and sensitive configurations secure and separate from your code.

# Step 3: API KEY

### Get an API KEY
1. Go to [](https://www.brianknows.org/app) [brianknows.org/app](http://brianknows.org/app)
2. Navigate to Settings → Connect Wallet
3. Click "Add new" → "Create"
4. Copy the generated API KEY

**Note:** The limit is 1,000 calls/month per API KEY, and only one API KEY can be generated per wallet.

### Configure the API KEY
1. Create a .env file:
```bash
touch .env
```
2. Add the API KEY:
 ```bash
BRIAN_API_KEY = XXXXX
```

**Important:** Remember to include .env in your .gitignore file if you plan to upload the project to GitHub.

# Step 4: Create and Configure the Main File
*Note:* You can use either TypeScript or JavaScript for this step.

1. Create index.js:
```bash
touch index.js
```
2. Import dependencies:
```JavaScript
import dotenv from "dotenv";

import {BrianSDK, BadRequestError} from "@brian-ai/sdk";
```
3. Initialize dotenv:
```JavaScript
dotenv.config(); 
```
4. Configure the SDK:
```JavaScript
const BRIAN_API_KEY = process.env.BRIAN_API_KEY;

if (!BRIAN_API_KEY) {

throw new Error("BRIAN_API_KEY is not set");

}
```
5. Initialize the SDK:
```JavaScript
const brian = new BrianSDK({

apiKey: BRIAN_API_KEY,

// apiUrl: process.env.API_URL // Optional

// apiVersion: 'v0' // Optional

});
```

**Initialization Options:**
- `apiKey` (required): API key to access Brian APIs
- `apiUrl` (optional): Default is https://api.brianknows.org (EU), or https://us-api.brianknows.org (US)
- `apiVersion` (optional): Currently, only 'v0' is available


#  Step 5: SDK Methods

The Brian SDK provides a variety of methods to interact with the API. Here’s a general overview of the most common methods you can use.

## Method ask
The `ask` method generates responses based on the text provided as input (`prompt`). For example, if you ask what Uniswap V4 is, it will explain the concept in detail.

### Uses of the ask Method
**Example 1:** Explaining the Superchain
```JavaScript
async function useAskMethod() {
    const prompt = "Explain me the Superchain"; 

    try {
        const callAsk = await brian.ask({
            prompt,
            kb: "public-knowledge-box",
        });

        console.log("Brians answer:", callAsk); 
    } catch (error) {
        console.error("Error:", error);
    }
}
useAskMethod();
```

This example demonstrates how to request an explanation about the Superchain using the ask method.

### Output Formats of the ask Method

The ask method can return responses in three main formats:

1. **answer:** Displays the response generated from the prompt.

**Usage Example:**
```JavaScript
async function useAskMethod() {
    const prompt = "Explain me the Superchain";

    try {
        const callAsk = await brian.ask({
            prompt,
            kb: "public-knowledge-box",
        });

        console.log("Brians answer:", callAsk.answer); // <- using answer
    } catch (error) {
        console.error("Error:", error);
    }
}
useAskMethod();
```

**Expected Output:**
```bash
Brians answer: The concept of a Superchain in the Web3 context represents an evolution in blockchain interoperability and scalability...
```

2.  **input:** Returns the original text of the provided prompt.

**Usage Example:**
```JavaScript
async function useAskMethod() {
    const prompt = "Explain me the Superchain";

    try {
        const callAsk = await brian.ask({
            prompt,
            kb: "public-knowledge-box",
        });

        console.log("Brians input:", callAsk.input); // <- using input
    } catch (error) {
        console.error("Error:", error);
    }
}
useAskMethod();
```

**Expected Output:**
```bash
Brians input: Explain me the Superchain
```

3. **context:** Displays the information and sources used to generate the response. This format is useful for tracing the origin of the knowledge.

**Usage Example:**
```JavaScript
async function useAskMethod() {
    const prompt = "Explain me the Superchain";

    try {
        const callAsk = await brian.ask({
            prompt,
            kb: "public-knowledge-box",
        });

        console.log("Brians context:", callAsk.context); // <- using context
    } catch (error) {
        console.error("Error:", error);
    }
}
useAskMethod();

```

**Expected Output:**
```bash
Brians context: [
  {
    pageContent: "Technical documentation explaining the concept of a bridge and its components...",
    metadata: {
      source: "https://docs.connext.network/concepts/background/what-is-a-bridge",
      title: "What is a Bridge? - Technical Docs"
    }
  },
  {
    pageContent: "Additional data about the evolution of modular blockchain frameworks...",
    metadata: {
      source: "https://polygon.technology/docs/supernets",
      title: "Polygon Supernets Documentation"
    }
  }
]

```

**Additional Notes**

-   **answer** is ideal for directly obtaining the processed content.
-   **input** is useful for debugging the original text sent to the method.
-   **context** allows you to verify the sources and ensure the information is reliable.


## Method extract
The extract method is used to retrieve specific parameters from a given text. It is primarily designed to "recover" information from a previous call, facilitating data analysis or reuse.

### Key Functions
1. **Prompt**
Returns the prompt used in a previous call.

**Usage Example:**
```JavaScript
async function useExtractMethod() {
    const prompt = "Explain me the Superchain";

    try {
        const callAsk = await brian.ask({
            prompt,
            kb: "public-knowledge-box",
        });

        const callExtract = await brian.extract({ prompt });

        console.log("Brians extract (prompt):", callExtract.prompt); 
    } catch (error) {
        console.error("Error:", error);
    }
}
useExtractMethod();

```

**Expected Output:**

```bash
Brians extract (prompt): Explain me the Superchain
```



2. **completion**
Displays the action performed by the call and the prompt associated with it.

**Usage Example:**
```JavaScript
async function useExtractMethod() {
    const prompt = "Explain me the Superchain";

    try {
        const callAsk = await brian.ask({
            prompt,
            kb: "public-knowledge-box",
        });

        const callExtract = await brian.extract({ prompt });

        console.log("Brians extract (completion):", callExtract.completion);
    } catch (error) {
        console.error("Error:", error);
    }
}
useExtractMethod();
```

**Expected Output:**
```bash
Brians extract (completion): [ { action: 'askbrian', prompt: 'Explain me the Superchain.' } ]
```

 **Additional Notes**

1.  **Prompt Reusability:** The parameter extracted with prompt can be reused for new calls or data validation.
2.  **Traceability with completion:** The output from completion is essential for tracking actions and auditing processes.
3.  **Error Handling:** Ensure proper error management for each call to avoid unexpected interruptions.

## Method generateCode

The `generateCode` method is used to create Solidity smart contract code based on a description provided as text (prompt). This method allows you to generate the code with or without markdown formatting.

**Output Options:**

1.  **With Markdown:**
The generated code is presented in Markdown format, ideal for sharing on platforms that support this format.

2.  **Without Markdown:**
The generated code is provided as plain text, displaying only the raw contract code.

_**Example 1: With Markdown**_
```JavaScript
async function useGenerateCodeMethod() {

    const prompt = "Create an ERC20 token named 'MyToken' with symbol 'MTK' and supply of 1,000,000.";

    try {
        const callGenerateCode = await brian.generateCode({
            prompt,
        }, false); // <- With markdown

        console.log("Brians answer:", callGenerateCode.result);

    } catch (error) {
        console.error("Error:", error);
    }
}
useGenerateCodeMethod();
```

**Expected Output:**
```bash
Brians answer: {
  contract: '```solidity\n' +
    '// SPDX-License-Identifier: MIT\n' +
    'pragma solidity 0.8.26;\n' +
    '\n' +
    'import {ERC20} from "@openzeppelin/contracts@5.1.0/token/ERC20/ERC20.sol";\n' +
    '\n' +
    'contract MillionToken is ERC20 {\n' +
    '    constructor() ERC20("MyToken", "MTK") {\n' +
    '        _mint(msg.sender, 1_000_000 * 10 ** decimals());\n' +
    '    }\n' +
    '}\n' +
    '```',
  contractName: 'MillionToken'
}
```

_**Example 2: Without Markdown**_
```JavaScript
async function useGenerateCodeMethod() {

    const prompt = "Create an ERC20 token named 'MyToken' with symbol 'MTK' and supply of 1,000,000.";

    try {
        const callGenerateCode = await brian.generateCode({
            prompt,
        }, true); // <- Without markdown

        console.log("Brians answer:", callGenerateCode.result);

    } catch (error) {
        console.error("Error:", error);
    }
}
useGenerateCodeMethod();
```

**Expected Output:**
```bash
Smart Contract:
// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

import {ERC20} from "@openzeppelin/contracts@5.1.0/token/ERC20/ERC20.sol";

contract MillionToken is ERC20 {
    constructor() ERC20("MyToken", "MTK") {
        _mint(msg.sender, 1_000_000 * 10 ** decimals());
    }
}
```


**Error Handling for Non-Markdown Output**
If selecting without Markdown results in an error, you can manually remove the markdown using the following script:

**Code to Remove Markdown:**

```JavaScript
async function useGenerateCodeMethod() {
    const prompt = "Create an ERC20 token named 'MyToken' with symbol 'MTK' and supply of 1,000,000.";

    try {
        const callGenerateCode = await brian.generateCode({
            prompt,
        }, false);

        const contractCode = callGenerateCode.result.contract
            .replace('```solidity\n', '')
            .replace('\n```', '');

        console.log("Smart Contract:");
        console.log(contractCode);
        
    } catch (error) {

        console.error("Error:", error);
    }
}
useGenerateCodeMethod();
```

 **Additional Output Options:**
In addition to the `result`, this method provides two additional outputs:
-   **`abi`**: Returns the ABI of the generated contract.
-   **`bytecode`**: Returns the bytecode of the generated contract.

**Example of Using All Output Options:**

```JavaScript
async function useGenerateCodeMethod() {
    const prompt = "Create an ERC20 token named 'MyToken' with symbol 'MTK' and supply of 1,000,000.";

    try {
        const callGenerateCode = await brian.generateCode({
            prompt,
        }, false); 

        console.log("Brians answer:", callGenerateCode.result);
        console.log("Brians answer:", callGenerateCode.abi);
        console.log("Brians answer:", callGenerateCode.bytecode);

    } catch (error) {
        console.error("Error:", error);
    }
}
useGenerateCodeMethod();
```

## Method transact

The `transfer` method allows you to send tokens from one wallet to another using Brian SDK. Before proceeding, ensure you have installed the necessary dependencies.

1. **Install Dependencies**
First, install the [viem](https://viem.sh/) library, which is required to interact with the blockchain:
```bash
npm install viem
```
2. **Configure Environment Variables**
To securely store your wallet’s private key and the RPC provider URL, add the following variables to the `.env` file:

```bash
WALLET_PRIVATE_KEY=
RPC_PROVIDER_URL=
```
3. **Set Up the Wallet Client**
In `index.js`, initialize the wallet client and configure the SDK:
```JavaScript
import dotenv from "dotenv";
import { BrianSDK} from "@brian-ai/sdk";
import { http } from "viem";
import { createWalletClient } from "viem";
import { privateKeyToAccount } from "viem/accounts";

dotenv.config();

const BRIAN_API_KEY = process.env.BRIAN_API_KEY;
if (!BRIAN_API_KEY) {
    throw new Error("BRIAN_API_KEY is not set");
}

const brian = new BrianSDK({
    apiKey: BRIAN_API_KEY,
    apiUrl: process.env.BRIAN_API_URL,
});

let privateKey = process.env.WALLET_PRIVATE_KEY || "";

if (!privateKey) {
    throw new Error("WALLET_PRIVATE_KEY environment variable is required");
}

privateKey = privateKey.startsWith("0x") ? privateKey : `0x${privateKey}`;

const account = privateKeyToAccount(privateKey);

const walletClient = createWalletClient({
    account: account,
    transport: http(process.env.RPC_PROVIDER_URL),
});
```

4. **Implement the transfer Method**
Now, create the function to transfer tokens:
```JavaScript
async function useTransactMethod() {
    const prompt = "Swap 1 USDC for WETH";

    try {
        const callTransact = await brian.transact({
            prompt,
            address: account.address,
            chainId: "34443"
        });

        if (callTransact && callTransact.length > 0) {
            const txResult = callTransact[0];
            const steps = txResult.data.steps;

            const approvalTx = await walletClient.sendTransaction({
                to: steps[0].to,
                data: steps[0].data,
                value: BigInt(steps[0].value),
                gasLimit: BigInt(steps[0].gasLimit)
            });

            await new Promise(resolve => setTimeout(resolve, 5000));

            const swapTx = await walletClient.sendTransaction({
                to: steps[1].to,
                data: steps[1].data,
                value: BigInt(steps[1].value),
                gasLimit: BigInt(steps[1].gasLimit)
            });

        }

    } catch (error) {
        console.error("Error:", error);
    }
}
useTransactMethod();
```

## Execute the methods.

To execute the methods, simply type `node index.js` in the terminal.

# Conclusion

In this tutorial, you explored how to integrate the Brian SDK to interact with artificial intelligence on the blockchain. You set up your environment, managed API keys, and used methods such as `ask`, `extract`, `generateCode`, and `transact` to perform key tasks, from answering questions and executing on-chain transactions to generating Solidity contracts. 
This SDK serves as an essential tool to optimize processes, automate tasks, and improve efficiency in Web3 projects.

## Official Sources

[SDK Repository](https://github.com/brian-knows/brian-sdk)
[API Reference](https://api.brianknows.org/swagger#tag/agent/POST/api/v0/agent/transaction)
[Brian Documentation](https://docs.brianknows.org/)
[Brian App](https://www.brianknows.org/app)
